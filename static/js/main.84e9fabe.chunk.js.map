{"version":3,"sources":["Block.js","models.js","Nav.js","SearchBar.js","ToggleSwitch.js","Transaction.js","Home.js","Address.js","NoMatch.js","App.js","reportWebVitals.js","index.js"],"names":["Block","params","id","useParams","useState","blockData","setBlockData","isLoading","setIsLoading","url","process","hex2num","hex","parseInt","toLocaleString","useEffect","a","axios","get","response","data","console","error","fetchData","to","parentHash","hash","sha3Uncles","miner","stateRoot","transactionsRoot","receiptsRoot","difficulty","number","gasLimit","gasUsed","timestamp","extraData","mixHash","nonce","defaultTxModel","raw","from","value","txFee","txModel","Nav","className","data-target","href","data-social-network","data-social-action","rel","data-social-target","target","SearchBar","keyword","setKeyword","getData","keywd","kw","trim","resTx","log","history","push","resBlk","style","width","background","border","padding","marginBottom","placeholder","onChange","e","onKeyDown","key","type","name","onClick","ToggleSwitch","checked","optionLabels","small","disabled","htmlFor","tabIndex","keyCode","preventDefault","handleKeyPress","data-yes","data-no","defaultProps","Transaction","tx","idx","transData","setTransData","all","Home","blkid","isAutoFetching","setIsAutoFetching","aquaData","setData","fetchTransDetails","trans","allRequests","map","tran","Promise","Transactions","interval","setInterval","clearInterval","position","right","Address","addressData","setAddressData","balance","pendingBalance","NoMatch","location","useLocation","pathname","Web3","require","givenProvider","App","basename","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.84e9fabe.chunk.js","sourcesContent":["import React, { Component, useEffect, useState } from 'react'\nimport axios from 'axios'\nimport { BrowserRouter as Router, Link, useParams } from 'react-router-dom'\n\nexport function Block(params) {\n    let { id } = useParams()\n\n    const [blockData, setBlockData] = useState({})\n    const [isLoading, setIsLoading] = useState(true)\n    const url = process.env.REACT_APP_BASE_URL\n    const hex2num = (hex) => parseInt(hex, 16).toLocaleString()\n\n    useEffect(() => {\n        if (id) {\n            const fetchData = async () => {\n                try {\n                    const response = await axios.get(`${url}/block/${id}`)\n                    setBlockData(response.data[0])\n                    setIsLoading(false)\n                } catch (error) {\n                    console.error(error)\n                }\n            }\n\n            fetchData()\n        } else {\n            setBlockData(params)\n            setIsLoading(false)\n        }\n    }, [id, params, url])\n\n    return !isLoading ? (\n        <ul>\n            <p>\n                parentHash:\n                <Link to={`/${blockData.parentHash}`}>\n                    {blockData.parentHash}\n                </Link>\n            </p>\n\n            <p>\n                hash:\n                <Link to={`/${blockData.hash}`}>{blockData.hash}</Link>\n            </p>\n\n            <p>{`sha3Uncles: ${blockData.sha3Uncles}`}</p>\n            <p>{`miner: ${blockData.miner}`}</p>\n            <p>{`stateRoot: ${blockData.stateRoot}`}</p>\n            <p>{`transactionsRoot: ${blockData.transactionsRoot}`}</p>\n            <p>{`receiptsRoot: ${blockData.receiptsRoot}`}</p>\n            {/* <p>{`logsBloom: ${blockData.logsBloom}`}</p> */}\n            <p>{`difficulty: ${hex2num(blockData.difficulty)}`}</p>\n            <p>{`number: ${hex2num(blockData.number)}`}</p>\n            <p>{`gasLimit: ${hex2num(blockData.gasLimit)}`}</p>\n            <p>{`gasUsed: ${hex2num(blockData.gasUsed)}`}</p>\n            <p>{`timestamp: ${blockData.timestamp}`}</p>\n            <p>{`extraData: ${blockData.extraData}`}</p>\n            <p>{`mixHash: ${blockData.mixHash}`}</p>\n            <p>{`nonce: ${blockData.nonce}`}</p>\n        </ul>\n    ) : (\n        <div>Loading ...</div>\n    )\n}\n","export const defaultTxModel = (raw) => {\n    return {\n        to: null,\n        from: null,\n        value: null,\n        txFee: null,\n        hash: null,\n    }\n}\n\nexport const txModel = (raw) => {\n    return {\n        to: raw.data[0].to,\n        hash: raw.data[0].hash,\n        from: raw.data[1].from,\n        value: parseInt(raw.data[0].value, 16).toLocaleString(),\n        txFee: parseInt(raw.data[1].txFee, 16).toLocaleString(),\n    }\n}\n","import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\n\nexport function Nav() {\n    return (\n        <nav className=\"navbar is-info\">\n            <div className=\"navbar-brand\">\n                <div\n                    className=\"navbar-burger burger\"\n                    data-target=\"navbarExampleTransparentExample\"\n                >\n                    <span></span>\n                    <span></span>\n                    <span></span>\n                </div>\n            </div>\n\n            <div id=\"navbarExampleTransparentExample\" className=\"navbar-menu\">\n                <div className=\"navbar-start is-link\">\n                    <Link className=\"navbar-item\" to=\"/\">\n                        Home\n                    </Link>\n                    <a\n                        className=\"navbar-item\"\n                        href=\"https://aquachain.github.io\"\n                    >\n                        Github\n                    </a>\n                    <a\n                        className=\"navbar-item\"\n                        href=\"https://explorer.aquacha.in/\"\n                    >\n                        explorer JSON\n                    </a>\n\n                    <div className=\"navbar-item has-dropdown is-hoverable\">\n                        <a\n                            className=\"navbar-link\"\n                            href=\"/documentation/overview/start/\"\n                        >\n                            Docs\n                        </a>\n                        <div className=\"navbar-dropdown is-boxed\">\n                            <a className=\"navbar-item\" href=\"admin.html\">\n                                Admin\n                            </a>\n                            <a className=\"navbar-item\" href=\"forum.html\">\n                                Forum\n                            </a>\n                            <a className=\"navbar-item\" href=\"blog.html\">\n                                Blog\n                            </a>\n                            <hr className=\"navbar-divider\" />\n                            <a className=\"navbar-item\" href=\"search.html\">\n                                Search\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"navbar-end\">\n                    <div className=\"navbar-item\">\n                        <div className=\"field is-grouped\">\n                            <p className=\"control\">\n                                <a\n                                    className=\"bd-tw-button button\"\n                                    data-social-network=\"Twitter\"\n                                    data-social-action=\"tweet\"\n                                    rel=\"noreferrer\"\n                                    data-social-target=\"#\"\n                                    target=\"_blank\"\n                                    href=\"https://twitter.com/intent/tweet?text=get free bulma templates:;url=https://github.com/BulmaTemplates/bulma-templates\"\n                                >\n                                    <span className=\"icon\">\n                                        <i className=\"fab fa-twitter\"></i>\n                                    </span>\n                                    <span> Tweet </span>\n                                </a>\n                            </p>\n                            <p className=\"control\">\n                                <a\n                                    className=\"button is-primary\"\n                                    href=\"https://aquachain.github.io/\"\n                                >\n                                    <span className=\"icon\">\n                                        <i className=\"fas fa-download\"></i>\n                                    </span>\n                                    <span>Download</span>\n                                </a>\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </nav>\n    )\n}\n","import axios from 'axios'\nimport { useState } from 'react'\n\nexport const SearchBar = (params) => {\n    const [keyword, setKeyword] = useState('')\n    const url = process.env.REACT_APP_BASE_URL\n\n    const getData = async (keywd) => {\n        const kw = keywd.trim()\n        const resTx = await axios.get(`${url}/tx/${kw}`)\n        if (resTx.data) {\n            console.log('tx found', resTx.data)\n            params.params.history.push(`/tx/${kw}`)\n        } else {\n            const resBlk = await axios.get(`${url}/block/${kw}`)\n            if (resBlk.data === 'invalid block\\n') {\n                console.log('nothing')\n                params.params.history.push(`/notfound/${kw}`)\n            } else {\n                console.log('resBlk found', resBlk.data)\n                params.params.history.push(`/${kw}`)\n            }\n        }\n    }\n\n    const BarStyling = {\n        width: '20rem',\n        background: '#F2F1F9',\n        border: 'none',\n        padding: '0.5rem',\n        marginBottom: '1rem',\n    }\n    return (\n        <>\n            <input\n                style={BarStyling}\n                key=\"random1\"\n                value={keyword}\n                placeholder={'tx/block'}\n                onChange={(e) => {\n                    return setKeyword(e.target.value)\n                }}\n                onKeyDown={(e) => (e.key === 'Enter' ? getData(keyword) : null)}\n            />\n            <button\n                type=\"button\"\n                style={{\n                    padding: '0.5rem',\n                    background: '#F2F1F9',\n                    border: 'none',\n                }}\n                name=\"\"\n                id=\"\"\n                onClick={(e) => {\n                    getData(keyword)\n                }}\n                className=\"btn btn-primary btn-lg btn-block\"\n            >\n                search\n            </button>\n        </>\n    )\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './ToggleSwitch.scss'\n\n/*\nToggle Switch Component\nNote: id, checked and onChange are required for ToggleSwitch component to function.\nThe props name, small, disabled and optionLabels are optional.\nUsage: <ToggleSwitch id={id} checked={value} onChange={checked => setValue(checked)}} />\n*/\n\nconst ToggleSwitch = ({\n    id,\n    name,\n    checked,\n    onChange,\n    optionLabels,\n    small,\n    disabled,\n    style,\n}) => {\n    function handleKeyPress(e) {\n        if (e.keyCode !== 32) return\n\n        e.preventDefault()\n        onChange(!checked)\n    }\n\n    return (\n        <div\n            className={'toggle-switch' + (small ? ' small-switch' : '')}\n            style={style}\n        >\n            <input\n                type=\"checkbox\"\n                name={name}\n                className=\"toggle-switch-checkbox\"\n                id={id}\n                checked={checked}\n                onChange={(e) => onChange(e.target.checked)}\n                disabled={disabled}\n            />\n            {id ? (\n                <label\n                    className=\"toggle-switch-label\"\n                    htmlFor={id}\n                    tabIndex={disabled ? -1 : 1}\n                    onKeyDown={(e) => {\n                        handleKeyPress(e)\n                    }}\n                >\n                    <span\n                        className={\n                            disabled\n                                ? 'toggle-switch-inner toggle-switch-disabled'\n                                : 'toggle-switch-inner'\n                        }\n                        data-yes={optionLabels[0]}\n                        data-no={optionLabels[1]}\n                        tabIndex={-1}\n                    />\n                    <span\n                        className={\n                            disabled\n                                ? 'toggle-switch-switch toggle-switch-disabled'\n                                : 'toggle-switch-switch'\n                        }\n                        tabIndex={-1}\n                    />\n                </label>\n            ) : null}\n        </div>\n    )\n}\n\n// Set optionLabels for rendering.\nToggleSwitch.defaultProps = {\n    optionLabels: ['AUTO', 'OFF'],\n}\n\nToggleSwitch.propTypes = {\n    id: PropTypes.string.isRequired,\n    checked: PropTypes.bool.isRequired,\n    onChange: PropTypes.func.isRequired,\n    name: PropTypes.string,\n    optionLabels: PropTypes.array,\n    small: PropTypes.bool,\n    disabled: PropTypes.bool,\n}\n\nexport default ToggleSwitch\n","import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport { Link, useParams } from 'react-router-dom'\nimport { txModel, defaultTxModel } from './models'\n\nexport function Transaction(params) {\n    let { id } = useParams()\n    const { tx, idx } = params\n\n    const [transData, setTransData] = useState(defaultTxModel)\n    const [isLoading, setIsLoading] = useState(true)\n    const url = process.env.REACT_APP_BASE_URL\n\n    useEffect(() => {\n        if (id) {\n            const fetchData = async () => {\n                try {\n                    const all = await axios.get(`${url}/tx/${id}`)\n\n                    setTransData(txModel(all))\n                    setIsLoading(false)\n                } catch (error) {\n                    console.error(error)\n                }\n            }\n\n            fetchData()\n        } else {\n            setTransData(txModel(tx))\n            setIsLoading(false)\n        }\n    }, [id, tx, url])\n\n    return !isLoading ? (\n        <div style={{ marginBottom: 20 }}>\n            <p>\n                {`${id ? 'txid' : idx}:\\t`}\n                <Link to={`/tx/${transData.hash}`}>{transData.hash}</Link>\n            </p>\n            <ul>\n                <p>\n                    to:\n                    <Link to={`/address/${transData.to}`}>{transData.to}</Link>\n                </p>\n                <p>\n                    from:\n                    <Link to={`/address/${transData.from}`}>\n                        {transData.from}\n                    </Link>\n                </p>\n                <p>value: {transData.value}</p>\n                <p>\n                    txFee:\n                    {transData.txFee}\n                </p>\n            </ul>\n        </div>\n    ) : (\n        <div>Loading ...</div>\n    )\n}\n","import axios from 'axios'\nimport { useEffect, useState } from 'react'\nimport { useLocation, useParams } from 'react-router'\nimport { Block } from './Block'\nimport { txModel } from './models'\nimport { Nav } from './Nav'\nimport { SearchBar } from './SearchBar'\nimport ToggleSwitch from './ToggleSwitch'\nimport { Transaction } from './Transaction'\n\nexport const Home = (params) => {\n    let { blkid } = useParams()\n\n    const [isAutoFetching, setIsAutoFetching] = useState(false)\n\n    const [aquaData, setData] = useState({})\n    const [transData, setTransData] = useState([])\n    const [isLoading, setIsLoading] = useState(true)\n    const url = process.env.REACT_APP_BASE_URL\n\n    useEffect(() => {\n        const fetchTransDetails = (trans) => {\n            const allRequests = trans.map((tran) =>\n                axios.get(`${url}/tx/${tran.hash}`)\n            )\n            return Promise.all(allRequests)\n        }\n\n        const fetchData = async () => {\n            const response = blkid\n                ? await axios.get(`${url}/block/${blkid}`)\n                : await axios.get(`${url}/head`)\n            // const response = await axios.get(`${url}/head`)\n\n            setData(response.data)\n\n            const all = await fetchTransDetails(response.data[1].Transactions)\n\n            setTransData(all)\n            setIsLoading(false)\n        }\n\n        fetchData()\n\n        if (isAutoFetching) {\n            const interval = setInterval(() => {\n                fetchData()\n            }, 3000)\n            return () => clearInterval(interval)\n        }\n    }, [isAutoFetching, url, blkid])\n\n    return (\n        <>\n            <div className=\"hero-body\">\n                <div style={{ position: 'absolute', right: 0 }}>\n                    <ToggleSwitch\n                        id=\"switch\"\n                        checked={isAutoFetching}\n                        onChange={(checked) => setIsAutoFetching(checked)}\n                        name=\"AUTO\"\n                    />\n                </div>\n                <SearchBar params={params} />\n                <div className=\"container\">\n                    <div className=\"content\">\n                        <h3>Block</h3>\n                        {isLoading ? (\n                            <div>Loading ...</div>\n                        ) : (\n                            <Block {...aquaData[0]} />\n                        )}\n\n                        <h3>Transactions</h3>\n                        {isLoading ? (\n                            <div>Loading ...</div>\n                        ) : (\n                            transData.map((tx, idx) => (\n                                <Transaction\n                                    key={txModel(tx).hash}\n                                    tx={tx}\n                                    idx={idx}\n                                />\n                            ))\n                        )}\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport { useParams } from 'react-router-dom'\n\nexport function Address() {\n    let { id } = useParams()\n    const [addressData, setAddressData] = useState()\n    const [isLoading, setIsLoading] = useState(true)\n    const url = process.env.REACT_APP_BASE_URL\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const all = await axios.get(`${url}/address/${id}`)\n                setAddressData(all)\n                setIsLoading(false)\n            } catch (error) {\n                console.error(error)\n            }\n        }\n\n        fetchData()\n    }, [id, url])\n\n    return !isLoading ? (\n        <div>\n            <p>Balance: {addressData.data.balance}</p>\n            <p>Pending Balance: {addressData.data.pendingBalance}</p>\n            <p>Nonce: {addressData.data.nonce}</p>\n        </div>\n    ) : (\n        <div>Loading ...</div>\n    )\n}\n","import { useLocation } from 'react-router'\n\nexport function NoMatch() {\n    let location = useLocation()\n\n    return (\n        <div>\n            <h3>\n                No match for <code>{location.pathname}</code>\n            </h3>\n        </div>\n    )\n}\n","import 'react-bulma-components/dist/react-bulma-components.min.css'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    HashRouter,\n} from 'react-router-dom'\nimport { Home } from './Home'\nimport { Nav } from './Nav'\nimport { Transaction } from './Transaction'\nimport { Address } from './Address'\nimport { Block } from './Block'\nimport { NoMatch } from './NoMatch'\n\nconst Web3 = require('web3')\nlet web3 = new Web3(Web3.givenProvider || 'ws://localhost:8545')\n\nfunction App() {\n    return (\n        <div>\n            <HashRouter basename={process.env.PUBLIC_URL}>\n                <Nav />\n                <Switch>\n                    <Route path=\"/tx/:id\" component={Transaction}></Route>\n                    <Route path=\"/address/:id\" component={Address}></Route>\n                    {/* <Route exact path=\"/block/:id\" component={Block}></Route> */}\n                    <Route path=\"/notfound/:id\" component={NoMatch}></Route>\n                    <Route path=\"/:blkid\" component={Home}></Route>\n                    <Route path=\"/\" component={Home}></Route>\n                    <Route path=\"*\" component={NoMatch}></Route>\n                </Switch>\n            </HashRouter>\n        </div>\n    )\n}\n\nexport default App\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry)\n                getFID(onPerfEntry)\n                getFCP(onPerfEntry)\n                getLCP(onPerfEntry)\n                getTTFB(onPerfEntry)\n            }\n        )\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}